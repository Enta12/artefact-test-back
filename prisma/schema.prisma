// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum TaskType {
  FEATURE
  BUGFIX
  DOCUMENTATION
  DESIGN
  OTHER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]   @relation("AssignedTasks")
  projects  UserProject[]

  refreshToken String?
  
  @@map("users")
}

model Project {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]
  columns   Column[]
  members   UserProject[]

  @@map("projects")
}

model Column {
  id        String   @id @default(uuid())
  name      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  tasks     Task[]

  @@unique([projectId, order])
  @@map("columns")
}

model UserProject {
  id        String      @id @default(uuid())
  role      ProjectRole @default(MEMBER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("user_projects")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?      @db.Text
  type        TaskType
  startDate   DateTime?
  endDate     DateTime?
  dueDate     DateTime?
  order       Int
  priority    TaskPriority @default(MEDIUM)
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  column      Column     @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId    String
  assignedTo  User?      @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?

  @@unique([columnId, order])
  @@map("tasks")
}